#!/bin/bash
# BEGIN_ICS_COPYRIGHT8 ****************************************
# 
# Copyright (c) 2015, Intel Corporation
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# END_ICS_COPYRIGHT8   ****************************************
##
## runmake
## -----------
## Perform a full build
## This is used by the weeklybuild script to provide product specific
## build operations for product's whose build is more complex
## than simply a "make stage prepfiles"
## When this is invoked, the current directory will be the TL_DIR for a
## full checkout of the product to be built
##
## Usage:
##	runmake [-B 'build_config ...'] [-V 'os_version os_version ...']
##			[-f options_file] [-T PROJ_FILE_DIR]
##			or
##	runmake -r [-C] [-B 'build_config ...'] [-V 'os_version os_version ...']
##			[-f options_file] [-T PROJ_FILE_DIR]
##
## Arguments:
##	-f options_file - file to use prior	to BuildOptons
##	-B build_config	release types to build, (debug/release). default is
##		based on $BUILD_TARGET_OS/$BUILD_TARGET.BuildOptions
##		or $BUILD_TARGET_OS/$BUILD_TARGET.Supported
##	-V os_version	operating system versions to build for, default is
##		based on $BUILD_TARGET_OS/$BUILD_TARGET.BuildOptions
##		or $BUILD_TARGET_OS/$BUILD_TARGET.Supported
##		if more than 1 version is specified, must be separated with spaces
##		and quoted
##		This should be a version string such as 2.4.7-10
##	-r 		rerun the build in place without doing a new checkout/tag
##	-C		don't clobber prior to the rerun
##	-O		Override to build despite kernel install not matching
##			Config file
##	-n		No build.  Useful for checking build machine
##	-T PROJ_FILE_DIR - PROJ_FILE_DIR value to use, useful when doing a build
##		within an ALL checkout
##
## In addition, the following environment variables are expected to be set:
##	RELEASE_TAG, BRANCH_TAG, BUILD_TARGET, PRODUCT, RELEASE_HOME, BUILD_CONFIG 
##	The target command is expected to have already been run to set up the
##	environment for the specified target
##
##	re-run can be used for 2 situations:
##	1. re-run a failed build to correct incorrect weeklybuild arguments
##		or other non-source code related problems (out of disk space)
##	2. re-run a build for a different BUILD_TARGET_OS_VERSION while using the same
##		source code image/tag
##	If the source code needs to be corrected, a full weeklybuild should be run
##	after the correction such that the code is properly tagged.
##
##	Since weeklybuild and target commands always set BUILD_CONFIG, this
##	script ignores BUILD_CONFIG.  As such the BuildOptions file
##	or the -B argument completely control BUILD_CONFIG for this product.

. $ICSBIN/funcs.sh

# a given release will be targeted for a specific version of ofed
# however we allow build.config to override if needed
export OFED_STACK_PREFIX=${OFED_STACK_PREFIX:-/usr/ofed-1.5.2}
export BUILD_TARGET=${BUILD_TARGET:-X86_64}

Usage()
{
	# include "ERROR" in message so weeklybuild catches it in error log
	echo "ERROR: runmake failed" >&2
	echo "Usage: runmake [-B 'build_config ...'] [-V 'os_version os_version ...']" >&2
 	echo "               [-f options_file] [-T PROJ_FILE_DIR]" >&2
	echo "            OR" >&2
	echo "       runmake -r [-C] [-B 'build_config ...'] [-V 'os_version os_version ...']" >&2
 	echo "               [-f options_file] [-T PROJ_FILE_DIR]" >&2
	exit 2
}

showbuild()
{
	# output summary of what we are building to stdout
	echo "Building for $BUILD_TARGET_OS $BUILD_TARGET $BUILD_TARGET_OS_VERSION $BUILD_CONFIG $(date)..."
}

get_option()
{
	# determine the given option line in BuildOptions
	# if not found in BuildOptions, use Supported
	# $1 = option name
	# $2 = default value if not specified in files
	value=
	if [ $fflag = y ]
	then
		value=`grep "^$1" $build_options 2>/dev/null|cut -f2 -d:`
	fi
	if [ -z "$value" -a -f $TL_DIR/$(basename $PWD)/$BUILD_TARGET_OS/${BUILD_TARGET}.BuildOptions ]
	then
		value=`grep "^$1:" $TL_DIR/$(basename $PWD)/$BUILD_TARGET_OS/${BUILD_TARGET}.BuildOptions 2>/dev/null|cut -f2 -d:`
	fi
	if [ -z "$value" -a -f $TL_DIR/$(basename $PWD)/$BUILD_TARGET_OS/${BUILD_TARGET}.Supported ]
	then
		value=`grep "^$1:" $TL_DIR/$(basename $PWD)/$BUILD_TARGET_OS/${BUILD_TARGET}.Supported 2>/dev/null|cut -f2 -d:`	
	fi
	if [ -z "$value" ]
	then
		value="$2"
	fi
	echo "$value"
	return 0
}

setbuildconfig()
{
	# determine appropriate default build config

	if [ -z "$build_configs" ]
	then
		#if [ ! -z "$BUILD_CONFIG" ]
		#then
		#	# weeklybuild environment can override defaults
		#	export build_configs="$BUILD_CONFIG"
		#else
		build_configs=$(get_option BUILD_CONFIG debug)
	fi
}

setosversion()
{
	# determine appropriate default os version(s)

	if [ -z "$os_versions" ]
	then
		os_vendor_ver=`echo $BUILD_PLATFORM_OS_VENDOR_VERSION | tr '.' '_'`
		os_tmp=$(get_option BUILD_TARGET_OS_VERSION_$BUILD_TARGET_OS_VENDOR$os_vendor_ver "")
		if [ "$BUILD_PLATFORM_OS_VENDOR" == apple ]
		then
			os_versions="$os_tmp"
		else
			for rel in $os_tmp
			do
				if [ -d /lib/modules/$rel/build ]
				then
					os_versions="$os_versions $rel"
				else
					if [ -z "$Oflag" ]
					then
						echo "ERROR: kernel for $rel not installed"
						exit 1
					fi
				fi
			done
		fi
	fi
}

build_configs=
os_versions=
rerun=n
Cflag=n
Bflag=n
Vflag=n
fflag=n
nflag=n
build_options=
proj_file_dir=
while getopts f:B:V:rCOnT: param
do
	case $param in
	V)
		Vflag=y
                os_versions="`echo $OPTARG | sed 's/,/ /g'`";;
	B)
		Bflag=y
		build_configs="$OPTARG";;
	f)
		fflag=y
		build_options="$OPTARG";;
	r)
		rerun=y;;
	C)
		Cflag=y;;
	O)
		Oflag=y;;
	n)
		nflag=y;;
	T)	proj_file_dir="$OPTARG";;
	?)
		Usage
	esac
done
shift $(($OPTIND -1))

if [ $# != 0 ]
then
		Usage
fi

if [ -z "$RELEASE_TAG" ]
then
	export RELEASE_TAG=`patch_engineer_version|cut -d"." -f1`
	echo "Defaulting RELEASE_TAG to $RELEASE_TAG"
	# engineers will always forget this flag, since clobber is fast
	# default to a rerun which will clobber first unless -C specified
	rerun=y
fi

# these are special cases
if [ "$SUBPRODUCT" = "GPL" ]
then
	echo "ERROR: GPL build not supported for OPENIB_HOST at this time" >&2
	exit 1
	dir=$PWD
	cd ..
	rm -rf C_* SH_* GPL_* LGPL_* InfiniSer*
	$dir/MakeTools/gpl_source.sh $RELEASE_TAG
	# gpl_source script produces packaged_files
	cp $dir/packaged_files $dir/dist_files
	exit $?
elif [ "$SUBPRODUCT" = "SRC" ]
then
	COPYRIGHT_NOTICE=${COPYRIGHT_NOTICE:-CodeTemplates/copyright.txt}
	insert_notice $COPYRIGHT_NOTICE
	dir=$PWD
	( cd ..; tar cvfz InfiniServFFSrc.$RELEASE_TAG.tgz --exclude CVS --exclude '*.bak' `basename $dir`; [ $? = 0 ] || echo "ERROR: tar command failed" )
	echo "../InfiniServFFSrc.$RELEASE_TAG.tgz" > packaged_files
	echo "../InfiniServFFSrc.$RELEASE_TAG.tgz" > dist_files
	exit $?
elif [ "$SUBPRODUCT" = "TESTS" ]
then
	settl
	PRODUCT_DIR=$PWD
	cd $TL_DIR
	dir=release.$PRODUCT.$SUBPRODUCT
	mkdir $dir
	cp -R HostTestCases $dir/HostTests
	cp -R Makerules MakeTemplates MakeTools TestTools TestOnly CodeTemplates $dir/HostTests
	( cd $dir; tar cvfz IntelOPA-IntTests.$RELEASE_TAG.tgz --exclude CVS --exclude '*.bak' HostTests; [ $? = 0 ] || echo "ERROR: tar command failed" )
	echo "$TL_DIR/$dir/IntelOPA-IntTests.$RELEASE_TAG.tgz" > $PRODUCT_DIR/packaged_files
	# this should not be distributed, so create an empty dist_files
	> $PRODUCT_DIR/dist_files
	exit $?
elif [ "$SUBPRODUCT" = "OPEN12200" ]
then
	echo "ERROR: OPEN12200 build no longer supported for OPENIB_HOST" >&2
	exit 1
fi

if [ "$SUBPRODUCT" = "MCLX" ]
then
	export BUILD_BRAND="Mercury Computer Systems, Inc."
fi

resetct
resetbsp
if [ "$BUILD_TARGET_TOOLCHAIN" == "INTEL" ]
then
	target $BUILD_TARGET_TOOLCHAIN
else
	target $BUILD_TARGET
fi

# determine the correct default build config(s) if any
setbuildconfig

echo "---------------------------------------"
showenv
echo "---------------------------------------"

# for FastFabric the kernel rev is not important.  We simply use the kernel rev
# of the running kernel.  While BUILD_TARGET_OS_VERSION is needed by Makerules
# it will have no impact on what is actually built for FastFabric
export BUILD_TARGET_OS_VERSION=${BUILD_TARGET_OS_VERSION:-`uname -r`}
setver $BUILD_TARGET_OS_VENDOR $BUILD_TARGET_OS_VERSION

if [ -z "$build_configs" ]
then
	# default to release build
	setrel
elif [ "$build_configs" != debug -a "$build_configs" != release ]
then
	Usage
else
	export BUILD_CONFIG="$build_configs"
fi

# determine the correct default OS version(s) if any
#setosversion
export PROJ_FILE_DIR=$proj_file_dir
echo "Using PROJ_FILE_DIR=$PROJ_FILE_DIR"


if [ -z "$build_configs" ]
then
	# default to release build
	#setrel
	echo "$0: ERROR: Unable to determine BUILD_CONFIGs to build" >&2
	exit 1
fi
#if [ -z "$os_versions" ]
#then
#	echo "$0: ERROR: Unable to determine os version to build" >&2
#	exit 1
#fi
if [ ! -d $OFED_STACK_PREFIX ]
then
	echo "$0: ERROR: OFED stack not found: $OFED_STACK_PREFIX" >&2
	exit 1
fi

if [ "$nflag" = "y" ]
then
	#echo "Kernels to build: $os_versions"
	echo "Building for OFED: $OFED_STACK_PREFIX" >&2
	exit 0
fi

if [ -z "$RELEASE_TAG" ]
then
	export MODULEVERSION=`patch_engineer_version`
	export RPM_VER=`echo $MODULEVERSION|cut -d"." -f1-2` 
	export RPM_REL=`echo $MODULEVERSION.999.999|cut -d"." -f3`
else
	export MODULEVERSION=`patch_version $RELEASE_TAG`
	export RPM_VER=`echo $MODULEVERSION|cut -d"." -f1-4`
	export RPM_REL=`echo $MODULEVERSION.999.999.999.999|cut -d"." -f5`
fi
	export MKRPM_VER=$RPM_VER
	export MKRPM_REL=$RPM_REL`rpm --eval %{?dist}`

if [ "$BUILD_TARGET_OS" != "VXWORKS" ]
then
	rpmbuild_dir=$PWD/rpmbuild

	echo "# Adjust the environment variables if necessary" > build.env
	echo "export PRODUCT=${PRODUCT:-OPENIB_FF}" >> build.env
	echo "export RELEASE_TAG=${RELEASE_TAG}" >> build.env
	echo "export BUILD_CONFIG=\${BUILD_CONFIG:-\"${BUILD_CONFIG}\"}" >> build.env
	echo "export BUILD_WITH_STACK=${BUILD_WITH_STACK}" >> build.env

	./package_script.sh $args

	if [ `basename $PWD` = OpenIb_Host ]; then
		export PROJ_FILE_DIR=OpenIb_Host
		rpmbuild_dir=$TL_DIR/rpmbuild
	fi
	make final_package
	cp $rpmbuild_dir/BUILD/opa-${RPM_VER}/packaged_files .
	cp $rpmbuild_dir/BUILD/opa-${RPM_VER}/dist_files . 

	./build_tests.sh

	exit 0
fi

# clean up from prior build when rebuilding
if [ "$rerun" = y -a "$Cflag" != y ]
then
	# force full rebuild
	export REMOVE_DEPENDS=yes
	clobber_arg="clobber clobber_stage clobber_release"
else
	clobber_arg=
fi
rm -rf $TL_DIR/packaged_files $TL_DIR/dist_files

# export DATE for use by prep so all files get same date/time stamp
DATE=${DATE:-"`date +'%m/%d/%y %H:%M'`"}

echo "Building $build_configs for $os_versions for $BUILD_TARGET_OS $BUILD_TARGET ..."
echo "==============================================================================="
for build_config in $build_configs
do
	# setup environment using BUILD_CONFIG
	export BUILD_CONFIG=$build_config

	#for os_version in $os_versions
	#do
		#setver $BUILD_TARGET_OS_VENDOR $os_version
		showbuild
		make $clobber_arg stage
		# adjusted so release notes don't report kernel OS Versions
		#echo "Done $BUILD_TARGET_OS $BUILD_TARGET $BUILD_TARGET_OS_VERSION $(date)"
		echo "Done $BUILD_TARGET_OS $BUILD_TARGET allkernels $(date)"
		echo "==============================================================================="
		# next build will clobber first
		clobber_arg=clobber
	#done
done
echo "Preping Files for $BUILD_TARGET_OS $BUILD_TARGET $(date)..."
# run prep and package once at end
make prepfiles package
